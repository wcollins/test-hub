---
- name: Run show commands on Arista devices
  hosts: "{{ target | default('all') }}"
  gather_facts: false
  
  vars:
    commands_file: "commands.txt"  # Default commands file
    timeout: 30
    ssh_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    save_output: true
    output_dir: "./command_outputs"
    
  tasks:
    - name: Check if commands file exists
      ansible.builtin.stat:
        path: "{{ commands_file }}"
      register: file_stat
      delegate_to: localhost
      
    - name: Fail if commands file doesn't exist
      ansible.builtin.fail:
        msg: "Commands file '{{ commands_file }}' not found. Please specify a valid file with -e 'commands_file=path/to/file.txt'"
      when: not file_stat.stat.exists
    
    - name: Read commands from file
      ansible.builtin.slurp:
        src: "{{ commands_file }}"
      register: commands_content
      delegate_to: localhost
      
    - name: Parse commands from file
      ansible.builtin.set_fact:
        commands: "{{ (commands_content.content | b64decode).splitlines() | reject('search', '^\\s*#') | reject('search', '^\\s*$') | list }}"
      
    - name: Display commands to be executed
      ansible.builtin.debug:
        var: commands
        
    - name: Check if any valid commands were found
      ansible.builtin.fail:
        msg: "No valid commands found in '{{ commands_file }}'. File may be empty or contain only comments."
      when: commands | length == 0

    - name: Ensure output directory exists
      ansible.builtin.file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      when: save_output | bool
      
    - name: Run commands on Arista devices
      arista.eos.eos_command:
        commands: "{{ commands }}"
      register: command_output
      vars:
        ansible_connection: network_cli
        ansible_network_os: arista.eos.eos
        ansible_ssh_common_args: "{{ ssh_args }}"
        ansible_command_timeout: "{{ timeout }}"
        
    - name: Display command output
      ansible.builtin.debug:
        var: command_output.stdout_lines
        
    - name: Save command output to file
      ansible.builtin.copy:
        content: "{{ command_output | to_nice_yaml }}"
        dest: "{{ output_dir }}/{{ inventory_hostname }}_commands_{{ ansible_date_time.iso8601_basic_short }}.yml"
      delegate_to: localhost
      when: save_output | bool
...